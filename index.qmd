---
title: "上原ゼミR講座"
format:
  revealjs:
    incremental: false
    css: styles.css
    include-in-header: 
      text: |
        <style>
        .center-xy {
          margin: 0;
          position: absolute;
          top: 50%;
          left: 50%;
          -ms-transform: translateY(-50%), translateX(-50%);
          transform: translateY(-50%), translateX(-50%);
        }
        .center-x {
          margin: 0;
          position: absolute;
          left: 50%;
          -ms-transform: translateX(-50%);
          transform: translateX(-50%);
        }
        </style>

author: ニッタ ジョエル
institute: <a href="https://joelnitta.com">https://joelnitta.com</a>
footer: <a href="https://joelnitta.github.io/uehara-r">https://joelnitta.github.io/uehara-r</a>
---

# 第一回: RとRStudio入門
2023-04-28

## なぜコードを使うのか？

- 解析を再現可能にするため

## 再現性とは？

- 他の人（将来の自分を含めて）があなたの解析を再度行って、同じ結果を得ることができること

## なぜR?

:::::: {.incremental}

- タダ
- 柔軟性
- 広く生態学に使われている
- コミュニティー

::::::

## RとRStudio 

:::: {.columns}

::: {.column width="50%"}
- Rとは「R Project for Statistical Computing」という組織が提供しているオープンソース（タダの）プログラミング言語
:::

::: {.column width="50%"}
![](https://www.r-project.org/logo/Rlogo.svg)
:::

::::

## RとRStudio

:::: {.columns}

::: {.column width="50%"}
- RStudioとはPosit社が提供しているIDE（Integrated Development Environment）
  - 基本的な機能はタダ
  - 会社向けの機能は有料
  - Rのコードを書く・実行する最適なソフト
:::

::: {.column width="50%"}
![](https://posit.co/wp-content/uploads/2022/10/thumbnail-3.jpg)
:::

::::

## 資料

:::: {.columns}

::: {.column width="50%"}
- [R for Reproducible Scientific Analysis（日本語）](https://swcarpentry-ja.github.io/r-novice-gapminder/ja/)

- R for Data Science
  - 英語版はオンラインで無料 [https://r4ds.had.co.nz/](https://r4ds.had.co.nz/)
  - 日本語版は[アマゾン](https://www.amazon.co.jp/R%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-Hadley-Wickham/dp/487311814X)などから 
:::

::: {.column width="50%"}
![](https://m.media-amazon.com/images/I/91WTLn1DrBL.jpg)
:::

::::

## ライブコーディングとは？

- インストラクターが打っていると同じコードを同時に自分のパソコンで打っていく

- インストラクターが参加者の理解を確認する（「〜が出来ましたか？」）

- zoomの「反応」をクリック→「はい」、「いいえ」　

<img src="images/zoom_reactions.png" alt="drawing" height="200">

## フィードバック

毎回簡単なアンケートがあります。次の講座をより良くするための参考とさせていただきます。ご回答お願いします。

<https://forms.gle/CAQyMEoSmECgSjBD8>

# 第二回: 関数と<br>パッケージ
2023-05-02

## 自己紹介

- 学年
- Rで何をしたい？（決まっていなくても、ボヤッとしてもいい）

## フィードバック

（フィードバックは**匿名**です）

. . . 

> とても分かりやすかったです。Rを使う意義を再確認できました。

- ありがとうございます！

## フィードバック

> 前のスクリーンの文字が少し小さくて読めなかった

- 拡大しました。これでいかがでしょうか？

. . .

> environmentのスペースをどういうときに使うのか気になった。

- 現在のRセッションに存在しているデータをリストアップする

## フィードバック

> コンソールとエディタのどちらに文字を打てばいいか忘れてしまっていて困った

- どちらも使う場合がありますが、**エディタの方が多いでしょう**

. . .

> Console内の実行履歴が保存できなかった

- 「Environment」の隣に「History」タブがあって、「History」タブから履歴を見たり保存したりすることが出来る。でも**Historyを使うよりもスクリプトを書くのがおすすめ。**

## フィードバック

> エラーが出た際の対応[をどうすれば良いのか？]

- **ガッカリしないでください**。まずはエラーメッセージを丁寧に読むこと、自分の打ったコマンドにミスがあったかどうかを確認すること。次に助けを求める（また後でこれについて説明します）。

## 前回のおさらい

:::::: {.incremental}

- R（あるいは他のプログラミング言語）を使う目的・<br>理由は**解析を再現可能にする**こと
- RとRStudioはそれぞれ別なソフト
  - RStudioを使うのにRが必須けど、Rは単独で使える
- RStudioでは、直接Rと話もできるし、コードを記録することもできる

::::::

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは再現の観点<br>からダメ！

. . . 

Tools → Global Options → General → Workspace

- "Restore .RData into workspace at startup" → **外す**
- "Save workspace to .RData on exit:" → **"Never"**

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは再現の観点<br>からダメ！

![](images/settings_change.png){fig-alt="Screenshot showing how to change Rstudio settings for .RData"}

## RStudioのプロジェクト管理

RStudioの「プロジェクト」機能（.Rprojファイル）はデータ解析の整理に役立つ

いつも決まったディレクトリ構造を使うと楽になる

## RStudioのプロジェクト管理 {.smaller}

- `data_raw/`
  - 生データを置く場所。生データは絶対にいじらない（読み込み専用）
- `data/`
  - コードによって整えられたデータを置く場所。使い捨てのつもりで良い。
- `results/`
  - コードによって得られた結果を置く場所。これも使い捨て。
- `code/`
  - コードを置く場所。ベストプラクティスはgitでバージョン管理を施す。

**データ**と**コード**があればいつでも結果は得られる（再現できる）

## コメントの書き方

`#`で書く（Rはこの後を無視する）

- 自分へのメモとして使う

- いっぱい書きましょう

## 変数の名前について

- 変数名には、文字、数字、下線、ピリオドを含むことができる。 数から始まることはできず、空白を含むことはできない。 長い変数名のつけ方は様々。

例えば、

- ピリオドを.単語の.間に入れる
- **下線を\_単語の\_間に入れる** （おすすめ）
- 単語の始まりを大文字にする（camelCaseToSeparateWords）

## 変数の名前について

Rは大文字・小文字の違いを意識するから、混ぜない方がわかりやすい

## 代入の演算子

代入の演算子として、`=`を使うこともできる：

::: large

```{r}
#| eval: FALSE
#| echo: TRUE
x = 1/40
```

:::

しかし、これはRユーザーでは、あまり使われていない。`<-`の方が意味がクリア。

## 環境を管理する

- `ls()`
  - 環境に入っているものをリストアップする
- `rm()`
  - 環境から何かを消す

## チャレンジ

次のプログラムのそれぞれの宣言の後、それぞれの変数の値は何になるでしょうか？

::: large

```{r}
#| eval: FALSE
#| echo: TRUE
mass <- 47.5
age <- 122
mass <- mass * 2.3
age <- age - 20
```

:::

. . .

次に、massとageを比較するコマンドを書いて下さい。 massはageよりも大きいでしょうか？

. . .

最後に、massとageの変数を消去し、作業環境をきれいにしよう

## 関数とは

何かの値（インプット）を受けて、処理して、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは？

関数の書き方：

- 関数名(引数)

関数の例：`print()`、`paste()`

## パッケージとは

**関数（とデータ）の集め**

. . .

何か具体的な解析をしたい時に使う

- たとえば、Shannon指数

## パッケージとは

- たとえば、Shannon指数

```{r}
#| label: shanon
#| echo: true

# "vegan" パッケージをロードする
library(vegan)

# "vegan" パッケージに備えているデータ、"BCI"をロードする
data(BCI)

# BCI　データの大きさを確かめる（行x列）
dim(BCI)

# Shannon指数を計算する
bci_shannon <- diversity(BCI, "shannon")

# 結果を確かめる
head(bci_shannon)
```

## パッケージの管理

- `install.packages("packagename")`
  - パッケージのインストール（一回でいい）
- `library(packagename)`
  - パッケージを使える状態にする（毎回）

## 分からなくなった時の対応

:::::: {.incremental}

- `help()`
  - 情報は正しいけど、初心者に優しくないことが多い
- ググって見る
  - StackOverflow
  - GitHub
- ChatGPT先生に聞く
  - 嘘をつくことあり。要注意。
- コミュニティーに聞く
  - TokyoR, AsiaRなど

::::::

## アンケート

<https://forms.gle/5jEFkqztS89TkC4D8>

ご回答をどうぞよろしくお願いします