---
title: "上原ゼミR講座"
format:
  revealjs:
    incremental: false
    css: styles.css
    include-in-header: 
      text: |
        <style>
        .center-xy {
          margin: 0;
          position: absolute;
          top: 50%;
          left: 50%;
          -ms-transform: translateY(-50%), translateX(-50%);
          transform: translateY(-50%), translateX(-50%);
        }
        .center-x {
          margin: 0;
          position: absolute;
          left: 50%;
          -ms-transform: translateX(-50%);
          transform: translateX(-50%);
        }
        </style>
execute: 
  echo: true
author: ニッタ ジョエル
institute: <a href="https://joelnitta.com">https://joelnitta.com</a>
footer: <a href="https://joelnitta.github.io/uehara-r">https://joelnitta.github.io/uehara-r</a>
---

# 第一回: RとRStudio入門
2023-04-28

## なぜコードを使うのか？

- 解析を再現可能にするため

## 再現性とは？

- 他の人（将来の自分を含めて）があなたの解析を再度行って、同じ結果を得ることができること

## なぜR?

:::::: {.incremental}

- タダ
- 柔軟性
- 広く生態学に使われている
- コミュニティー

::::::

## RとRStudio 

:::: {.columns}

::: {.column width="50%"}
- Rとは「R Project for Statistical Computing」という組織が提供しているオープンソース（タダの）プログラミング言語
:::

::: {.column width="50%"}
![](https://www.r-project.org/logo/Rlogo.svg)
:::

::::

## RとRStudio

:::: {.columns}

::: {.column width="50%"}
- RStudioとはPosit社が提供しているIDE（Integrated Development Environment）
  - 基本的な機能はタダ
  - 会社向けの機能は有料
  - Rのコードを書く・実行する最適なソフト
:::

::: {.column width="50%"}
![](https://posit.co/wp-content/uploads/2022/10/thumbnail-3.jpg)
:::

::::

## 資料

:::: {.columns}

::: {.column width="50%"}
- [R for Reproducible Scientific Analysis（日本語）](https://swcarpentry-ja.github.io/r-novice-gapminder/ja/)

- R for Data Science
  - 英語版はオンラインで無料 [https://r4ds.had.co.nz/](https://r4ds.had.co.nz/)
  - 日本語版は[アマゾン](https://www.amazon.co.jp/R%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E3%82%B5%E3%82%A4%E3%82%A8%E3%83%B3%E3%82%B9-Hadley-Wickham/dp/487311814X)などから 
:::

::: {.column width="50%"}
![](https://m.media-amazon.com/images/I/91WTLn1DrBL.jpg)
:::

::::

## ライブコーディングとは？

- インストラクターが打っていると同じコードを同時に自分のパソコンで打っていく

- インストラクターが参加者の理解を確認する（「〜が出来ましたか？」）

- zoomの「反応」をクリック→「はい」、「いいえ」　

<img src="images/zoom_reactions.png" alt="drawing" height="200">

## フィードバック

毎回簡単なアンケートがあります。次の講座をより良くするための参考とさせていただきます。ご回答お願いします。

<https://forms.gle/CAQyMEoSmECgSjBD8>

# 第二回: 関数と<br>パッケージ
2023-05-02

## 自己紹介

- 学年
- Rで何をしたい？（決まっていなくても、ボヤッとしてもいい）

## フィードバック

（フィードバックは**匿名**です）

. . . 

> とても分かりやすかったです。Rを使う意義を再確認できました。

- ありがとうございます！

## フィードバック

> 前のスクリーンの文字が少し小さくて読めなかった

- 拡大しました。これでいかがでしょうか？

. . .

> environmentのスペースをどういうときに使うのか気になった。

- 現在のRセッションに存在しているデータをリストアップする

## フィードバック

> コンソールとエディタのどちらに文字を打てばいいか忘れてしまっていて困った

- どちらも使う場合がありますが、**エディタの方が多いでしょう**

## フィードバック

> Console内の実行履歴が保存できなかった

- 「Environment」の隣に「History」タブがあって、「History」タブから履歴を見たり保存したりすることが出来る。でも**Historyを使うよりもスクリプトを書くのがおすすめ。**

## フィードバック

> エラーが出た際の対応[をどうすれば良いのか？]

- **ガッカリしないでください**。まずはエラーメッセージを丁寧に読むこと、自分の打ったコマンドにミスがあったかどうかを確認すること。次に助けを求める（また後でこれについて説明します）。

## 前回のおさらい

:::::: {.incremental}

- R（あるいは他のプログラミング言語）を使う目的・<br>理由は**解析を再現可能にする**こと
- RとRStudioはそれぞれ別なソフト
  - RStudioを使うのにRが必須けど、Rは単独で使える
- RStudioでは、直接Rと話もできるし、コードを記録することもできる

::::::

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは再現の観点<br>からダメ！

. . . 

Tools → Global Options → General → Workspace

- "Restore .RData into workspace at startup" → **外す**
- "Save workspace to .RData on exit:" → **"Never"**

## RStudioのデフォルト設定を<br>変えましょう

前のセッションのデータが残っていることは再現の観点<br>からダメ！

![](images/settings_change.png){fig-alt="Screenshot showing how to change Rstudio settings for .RData"}

## RStudioのプロジェクト管理

RStudioの「プロジェクト」機能（.Rprojファイル）はデータ解析の整理に役立つ

いつも決まったディレクトリ構造を使うと楽になる

## RStudioのプロジェクト管理 {.smaller}

- `data_raw/`
  - 生データを置く場所。生データは絶対にいじらない（読み込み専用）
- `data/`
  - コードによって整えられたデータを置く場所。使い捨てのつもりで良い。
- `results/`
  - コードによって得られた結果を置く場所。これも使い捨て。
- `code/`
  - コードを置く場所。ベストプラクティスはgitでバージョン管理を施す。

**データ**と**コード**があればいつでも結果は得られる（再現できる）

## コメントの書き方

`#`で書く（Rはこの後を無視する）

- 自分へのメモとして使う

- いっぱい書きましょう

## 変数の名前について

- 変数名には、文字、数字、下線、ピリオドを含むことができる。 数から始まることはできず、空白を含むことはできない。 長い変数名のつけ方は様々。

例えば、

- ピリオドを.単語の.間に入れる
- **下線を\_単語の\_間に入れる** （おすすめ）
- 単語の始まりを大文字にする（camelCaseToSeparateWords）

## 変数の名前について

Rは大文字・小文字の違いを意識するから、混ぜない方がわかりやすい

## 代入の演算子

代入の演算子として、`=`を使うこともできる：

::: large

```{r}
#| eval: FALSE
#| echo: TRUE
x = 1/40
```

:::

しかし、これはRユーザーでは、あまり使われていない。`<-`の方が意味がクリア。

## 環境を管理する

- `ls()`
  - 環境に入っているものをリストアップする
- `rm()`
  - 環境から何かを消す

## チャレンジ

次のプログラムのそれぞれの宣言の後、それぞれの変数の値は何になるでしょうか？

::: large

```{r}
#| eval: FALSE
#| echo: TRUE
mass <- 47.5
age <- 122
mass <- mass * 2.3
age <- age - 20
```

:::

. . .

次に、massとageを比較するコマンドを書いて下さい。 massはageよりも大きいでしょうか？

. . .

最後に、massとageの変数を消去し、作業環境をきれいにしよう

## 関数とは

何かの値（インプット）を受けて、処理して、計算結果（アウトプット）を返すもの

::: center-x

<img src="https://manamina.valuesccg.com/uploads/content/image/12292/__.png" alt="drawing" height="100">

::: small
<https://manamina.valuesccg.com/articles/756>
:::

:::

## 関数とは？

関数の書き方：

- 関数名(引数)

関数の例：`print()`、`paste()`

## パッケージとは

**関数（とデータ）の集め**

. . .

何か具体的な解析をしたい時に使う

- たとえば、Shannon指数

## パッケージとは

- たとえば、Shannon指数

```{r}
#| label: shanon
#| echo: true

# "vegan" パッケージをロードする
library(vegan)

# "vegan" パッケージに備えているデータ、"BCI"をロードする
data(BCI)

# BCI　データの大きさを確かめる（行x列）
dim(BCI)

# Shannon指数を計算する
bci_shannon <- diversity(BCI, "shannon")

# 結果を確かめる
head(bci_shannon)
```

## パッケージの管理

- `install.packages("packagename")`
  - パッケージのインストール（一回でいい）
- `library(packagename)`
  - パッケージを使える状態にする（毎回）

## 分からなくなった時の対応

:::::: {.incremental}

- `help()`
  - 情報は正しいけど、初心者に優しくないことが多い
- ググって見る
  - StackOverflow
  - GitHub
- ChatGPT先生に聞く
  - 嘘をつくことあり。要注意。
- コミュニティーに聞く
  - TokyoR, AsiaRなど

::::::

## アンケート

<https://forms.gle/5jEFkqztS89TkC4D8>

ご回答のご協力をどうぞよろしくお願いします

# 第三回: データ
2023-05-12

## tokyoR

slackの参加方法：<https://github.com/TokyoR/r-wakalang>に<br>行って、「参加」リンクをクリック

![](images/tokyor_sanka.png){fig-alt="How to join TokyoR Slack" height="200"}

## tokyoR

`#r_beginners`チャンネルがおすすめ

![](images/tokyor_slack.png){fig-alt="Screenshot of TokyoR slack" height="450"}

## フィードバック

> 今までコピペをして、理解できていなかったコマンドを理解する事ができた

- よかったです！コピペではある程度出来るし（自分もよくやっている）けど、基本が分からないと中々うまく行かない。chatGPTもやっぱりそう。

## フィードバック

> ホットキーの操作が上手くいかずコマンドを打ち間違えることが多かった。

- 他にもあるけど、今覚えていただきたいのは「実行する」（mac: ⌘⏎、windows: ctrl⏎）
  - 実行したい行の中にカーサーをおいて、あるいは選択してから打つ

## フィードバック

> 関数ls（）の意味は、関数rm（）で消した変数を復活させるという意味であってますか。

- 違います。`ls()`は現在環境にある物を**表示する**（list）コマンド。

- `rm()`で何かを消したら、それを**取り戻すことが<br>できない**（リナックスの`rm`と同様に）

## フィードバック

> shannon のあたりからコードを入れても同じように出てこないことがあった

- よかったら後で個別に見ましょう

## フィードバック

> コンソールとスクリプト画面の使い方について最初説明がありましたが、どちらを先に書くのが自分にあっているのか、試しながら探していきます。

- やっているうちに慣れてくるけど、スクリプトはコードを記録する（後でまた同じように出来るために取っておく）ところで、コンソールは気軽に何かを確認したい時に使う

## 前回のおさらい

- **「関数」**とは何かの値を受けて、処理して、計算結果を返すもの
- **「パッケージ」**とは、関数をまとめたもの

## tidyverse

- `tidyverse`とは、データの整理・基本的な解析を行うためのパケージの集まり（「パケージ郡」）。これからよく使うことになる。

- 個別にインストール・ロードする必要はなく、一気にできるので楽。

- インストールするのにちょっと時間かかるので今のうちにやりましょう。

```{r}
#| eval: false
#| echo: TRUE
install.packages("tidyverse")
```

## データタイプ

- numeric（数字）
  - Rでは「double」と呼ぶこともある

```{r}
#| echo: TRUE
cost <- 20.5

cost

typeof(cost)
```

## データタイプ

- character（文字列）
- 文字列を指定する際、引用符が必要
  - アポストロフィーも使えるけど、必要がなければ<br>おすすめしない
```{r}
#| echo: TRUE
my_name <- "Joel"
typeof(my_name)

x <- "1"
typeof(x)
```

## データタイプ

- character（文字列）
- 文字列を指定する際、引用符が必要
  - アポストロフィーも使えるけど、必要がなければ<br>おすすめしない

```{r}
#| echo: TRUE
#| error: true
x - 1
```

## データタイプ

- logical（論理型）

```{r}
#| echo: TRUE
yes <- TRUE
no <- FALSE
typeof(yes)
```

## データタイプ

- logical（論理型）
- `>`（より大きい）, `<`（より小さい）, `==`（等しい）, `!=`（等しくない）、`||`（もしくは）で比較ができる
  - `=` ではなく、`==`
```{r}
#| echo: TRUE
my_age <- 39
my_age > 40
my_name == "Fred"
my_name == "Joel"
my_name != "Fred"
my_age > 40 || my_age < 45
```

## ベクトル

- データを複数含むもの
  - データは全部**同じタイプじゃないといけない**

- ベクトルを作る関数は`c()`
  - "concatenate"（くっつける）の略

数字ベクトルを作ってみましょう
```{r}
#| echo: TRUE
ages <- c(39, 18, 70)
ages
```

## ベクトル

ベクトルには名前を持つことができる

```{r}
#| echo: TRUE
names(ages) <- c("joel", "mary", "bob")
ages
```

## データの部分集合化

「部分集合化」（subsetting）とは、**ベクトルの中から<br>欲しいところだけを切り取ること**

- `[]`で欲しいところを指定する
  - Rは（０ではなく）１から数える
```{r}
#| echo: true
# 一番目の値
ages[1]
# 一と二番目の値
ages[c(1,2)]
```

## データの部分集合化

- `-`（マイナス）で欲しくないところを切り落とす
```{r}
#| echo: true
# 一番目*以外*の値
ages[-1]
# 一と二番目*以外*の値
ages[-c(1,2)]
```

## データの部分集合化

**名前**で指定することもできる

```{r}
#| echo: true
ages["joel"]
ages[c("joel", "mary")]
```

## データの部分集合化

**ロジカルベクトル**で指定することもできる

```{r}
#| echo: true
ages[c(FALSE, FALSE, TRUE)]

is_senior <- ages > 65

ages[is_senior]
```

## チャレンジ

以下のうち、agesから**２つ目の数値だけ**を抜き出す事が<br>できるのはどれでしょう？

```
ages[ages > 15]
ages[c(FALSE, TRUE, FALSE)]
ages["2"]
ages[ages < 25]
ages[-2]
```

## データフレームについて

「データフレーム」とは表形式データ（エクセルで扱うようなデータ）

![](images/dataframe.png){fig-alt="Image of a data frame" height="400"}

## データフレームについて

- エクセルとの大きな違い：各列は同じデータ型を持たなければならない

- tidyverseパッケージでは、「tibble」と呼ばれる

## データフレームの読み込み

- tidyverseの`read_csv()`（CSVファイル）あるいは`read_tsv()`（TSVファイル）がおすすめ
  - `.xlsx`ファイルの読み込みには`xlsx`パッケージの`read_excel()`がおすすめ

- このデータをダウンロードして、`data_raw/`に保存してください：<https://www.dropbox.com/s/fdirlsnxlzy53qq/gapminder.csv?dl=0>

## データフレームの読み込み

- `read_csv()`でデータを読み込む

```{r}
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
gapminder <- read_csv("data_raw/gapminder.csv")
gapminder
```

## チャレンジ

`gapminder`を打つと、このデータについていくつかの事項が表示される。

- データの大きさはどれくらい（行と列はいくつある）？
- それぞれの行のデータの種類（データタイプ）は<br>どうなっている？

## データフレームの全体をつかむ

- `summary(data)`で全部の値の平均などを集計する

::: medsmall
```{r}
#| echo: true
summary(gapminder)
```
:::

## 列の順を並び変える

- `arrange(data, column)`

```{r}
#| echo: true
arrange(gapminder, pop)
```

## 列の順を並び変える

- `arrange(data, column1, column2)`で複数の行によって並び変える

```{r}
#| echo: true
arrange(gapminder, year, country)
```

## 列の順を並び変える

- デフォルトで小さい順（あるいは、Aの方）から並ぶ
- 大きい方（あるいは、Zの方）から並べたい時は`desc()`を使う

```{r}
#| echo: true
arrange(gapminder, year, desc(country))
```

## 行を抜き出す

- `select(data, column)`で行を抜き出す

```{r}
#| echo: true
select(gapminder, country)
```

## 行を抜き出す

- `select(data, column)`で行を抜き出す

```{r}
#| echo: true
select(gapminder, year, country, pop)
```

## 行を抜き出す

- 数字でも指定できる

```{r}
#| echo: true
select(gapminder, 1, 2)
```

## 行を抜き出す

- `:`で行の範囲を指定できる

```{r}
#| echo: true
select(gapminder, 1:4)
```

## 行を抜き出す

- `:`で行の範囲を指定できる

```{r}
#| echo: true
select(gapminder, country:pop)
```

## 列を絞る

- `filter()`である条件に合っている列だけに絞る

```{r}
#| echo: true
filter(gapminder, country == "Brazil")
```

## 列を絞る

- `filter()`である条件に合っている列だけに絞る

```{r}
#| echo: true
filter(gapminder, year == max(year))
```

## チャレンジ

`gapminder`からアジアのみの国名・年・人口のデータを切り出して、別のcsvファイルとして保存して下さい

- ヒント：`write_csv()`でcsvファイルを保存することができる

## アンケート

<https://forms.gle/ZLiiS9mVy8FJ2yBR6>

ご回答のご協力をどうぞよろしくお願いします

# 第四回: データ（後編）と図の作成
2023-05-19

## フィードバック

> データの保存場所に苦労した

R（そして、他のプログラミング言語も）は現在いる場所（**「作業ディレクトリ」**）から物を探す。自分の頭の中の「今いる場所」とRの作業ディレクトリが違うと上手くいかない。

## 作業ディレクトリの確認・設定

- `getwd()`で作業ディレクトリを確認する

- `setwd()`で作業ディレクトリを設定する

おすすめ：RStudioのプロジェクト機能を使って、**`.Rproj`ファイルをダブルクリックすることでRStudioを開く。**

そうすれば、**作業ディレクトリがプロジェクトのフォルダーになる**ので、わかりやすい。

## フィードバック

```{r}
#| eval: false
#| echo: true
ages <- c(39, 18, 70)
names(ages) <- c("joel", "mary", "bob")
ages
```

> 上記のコードでは、それぞれの年齢に名前を紐づけたという認識であってますか？

そうです。ただし、ベクトルの要素に名前をつけることはそんなに多くない。

## フィードバック

それよりも、データフレームを使うことが多い：

```{r}
#| echo: true
data.frame(
  name = c("joel", "mary", "bob"),
  age = c(39, 18, 70)
)
```

`data.frame()`あるいは`tibble()`でデータフレームを作る

## フィードバック

> bracket が2つ以上になるとc()がいるのはなぜでしょうか。

`[]`の中の数字が二つ以上のことですよね？何故なら、`[]`の中は**ベクトルではないといけない**からです。

（Rで`3`は長さ＝１のベクトルです）

## 前回のおさらい

- データの種類は三つある：数字、文字、ロジカル

- ベクトルとは、同じ種類のデータが複数入っているもの
  - `c()`でベクトルを作る
  - `[]`で欲しいところだけを抜き出す

- データフレームとは、エクセルで扱うような列と行からなるデータのこと
  - `read_csv()`で読み込む
  - `write_csv()`で書き出す

## 前回のおさらい

- データフレームを扱う`tidyverse`の関数が色々ある
  - `select()`: 行を絞る
  - `filter()`: 列を絞る
  - `arrange()`: 列を並び替える

## データを変換する

`mutate()`である行のデータを変換することができる。

例えば、人口を**万人単位**に変える：

```{r}
mutate(gapminder, pop = pop/10000)
```

## データを変換する

既にある行の名前を使えばその行は上書きされる。新しい名前を使ったら、新しい行が加えられる：

```{r}
mutate(gapminder, pop_man = pop/10000)
```

## パイプについて

前回では、複数の処理をする際、それぞれのアウトプットに名前をつけていました：

> `gapminder`からアジアのみの国名・年・人口のデータを切り出して、別のcsvファイルとして保存して下さい

```{r}
gapminder_asia <- filter(gapminder, continent == "Asia")
gapminder_asia_small <- select(gapminder_asia, country, year, pop)
```

でもこれは処理が多くなるとややこしくなってくる。

**もっといい方法はある：パイプ**

## パイプについて

「パイプ」とは、左の関数のアウトプットを右の関数の<br>インプットに渡すもの

<br>

`%>%`（あるいは`|>`）と書く。

## パイプについて

先の作業はパイプを使うとこのようにできる：

```{r}
filter(gapminder, continent == "Asia") %>%
  select(country, year, pop)
```

## パイプについて

複数の処理があると便利なことが分かる：

```{r}
filter(gapminder, continent == "Asia") %>%
  select(country, year, pop) %>%
  arrange(pop)
```

## パイプについて

あるいは
```{r}
gapminder %>%  
  filter(continent == "Asia") %>%
  select(country, year, pop) %>%
  arrange(pop)
```

## チャレンジ

`gapminder`から日本のデータに絞って、**国内総生産**を<br>計算してください

（今のデータでは**一人当たり**の値です）

## データの集計

`summarize()`でデータの集計ができる：

```{r}
summarize(gapminder, mean_pop = mean(pop))
```

## グループ化

しかし、全体の平均だけを計算してもあまり意味はない。

それよりも、何か**毎に**データの集計を行いたい方が多い。

それには`group_by()`関数を使う。例えば、国ごと。まずはデータのグループを指定する：

```{r}
gapminder %>%
  group_by(country)
```

## グループ化

次に、集計する：

```{r}
gapminder %>%
  group_by(country) %>%
  summarize(mean_pop = mean(pop))
```

## グループ化

グループ毎の計算が終わったら、`ungroup()`でグループの解除をする必要がある場合がある。

```{r}
gapminder %>%
  select(country, pop) %>%
  group_by(country) %>%
  mutate(mean_pop_country = mean(pop)) %>%
  ungroup() %>%
  mutate(mean_pop_total = mean(pop))
```

## 図の書き方

Rで図を書くのに二つの方法がある：基本R（他のパッケージを使わない）と`ggplot2`パッケージによる書き方

`ggplot2`は操作の一貫性があり、（割と）使いやすいのでおすすめです

## ggplot2

![](https://swcarpentry-ja.github.io/2021-04-02-todai-slides/images/ggplot-summary-1.png){fig-alt="diagram of a ggplot call" height="250"}

## ggplot2

![](https://swcarpentry-ja.github.io/2021-04-02-todai-slides/images/ggplot-summary-2.png){fig-alt="diagram of a ggplot call, filled in"}

## ggplot2

まずは`ggplot()`関数を使います。これでプロットのスペースが用意される（だけ）

```{r}
ggplot()
```

## ggplot2

次にどのようなデータを使いたいのか指定する
```{r}
ggplot(data = gapminder)
```

これだけでは**どのようなプロットを作りたいのか**教えてないのでやはりまだ何も出てこない

## ggplot2

次にどのようにデータを表したいのか教える。例えば年を横（x）軸に、人口を縦（y）軸にして、形は点（ポイント）にする:

```{r}
ggplot(data = gapminder) +
  geom_point(aes(x = year, y = pop))
```

やっと見えてきました！

## ggplot2

違う形を指定することもできる：

```{r}
ggplot(data = gapminder) +
  geom_line(aes(x = year, y = pop))
```

だが、これではあまり意味がないですね。

## ggplot2

もうちょっとデータを絞ってからやると`geom_line()`の意味が分かるでしょう：
```{r}
gapminder %>%
  filter(country == "Japan") %>%
  ggplot() +
  geom_line(aes(x = year, y = pop))
```

## ggplot2

もう一回ポイントに戻してみましょう：
```{r}
gapminder %>%
  filter(country == "Japan") %>%
  ggplot() +
  geom_point(aes(x = year, y = pop))
```


## ggplot2

`geom_point()`と`geom_line`を両方使ってもいい：

```{r}
gapminder %>%
  filter(country == "Japan") %>%
  ggplot(aes(x = year, y = pop)) +
  geom_line() +
  geom_point()
```

`+`を使うと図の要素を重ねていく

## チャレンジ

以下のプロットを作ってください：

```{r}
#| echo: false
ggplot(gapminder) +
  geom_point(aes(color = continent, size = gdpPercap, x = year, y = lifeExp))
```

ヒント：色は`color`で、大きさは`size`で指定できる

## アンケート

<https://forms.gle/ESy6XPXUR2mC9rB3A>

ご回答のご協力をどうぞよろしくお願いします